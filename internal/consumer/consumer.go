package consumer

import (
	"github.com/Koderbek/pocket_news_bot/internal/config"
	"github.com/Koderbek/pocket_news_bot/internal/model"
	"github.com/Koderbek/pocket_news_bot/internal/news"
	"github.com/Koderbek/pocket_news_bot/internal/repository"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"strings"
	"time"
)

const (
	botUrl  = "https://t.me/pocket_news_bot"
	botName = "üóûPocket News"
)

type Consumer struct {
	bot        *tgbotapi.BotAPI
	newsClient news.Client
	repo       *repository.Repository
	cfg        config.Consumer
}

func NewConsumer(bot *tgbotapi.BotAPI, newsClient news.Client, repo *repository.Repository, cfg config.Consumer) *Consumer {
	return &Consumer{bot: bot, newsClient: newsClient, repo: repo, cfg: cfg}
}

func (c *Consumer) Start() error {
	var requestCount int8 = 0
	for {
		//TODO: –ß–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã sent_news - –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
		if time.Now().Hour() == c.cfg.MailingTimeEnd || requestCount > c.cfg.RequestLimit {
			//–ù–æ–≤—ã–π –¥–µ–Ω—å. –ß–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—É sent_news
			if err := c.repo.SentNews.Clean(); err != nil {
				return err
			}

			time.Sleep(c.cfg.DailySleep * time.Hour)
		}

		categories, err := c.repo.Category.GetAll() //–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ category
		if err != nil {
			return err
		}

		for _, cat := range categories {
			requestCount++
			if requestCount > c.cfg.RequestLimit {
				break
			}

			catNews, err := c.newsClient.GetNews(cat.Code)
			if err != nil {
				return err
			}

			if err = c.repo.Category.UpdateLastSent(cat.Code); err != nil {
				return err
			}

			var linksHash []string
			message := []string{makeMessageHeader(cat)}
			for _, article := range catNews {
				linkHash := linkHashSum(article.Url)
				if c.repo.SentNews.IsExists(linkHash) {
					//–ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞–Ω–µ–µ, —Ç–æ —Å–∫–∏–ø–∞–µ–º –µ–µ
					continue
				}

				domain, err := parseHost(article.Url)
				if err != nil {
					return err
				}

				if c.repo.DomainBlacklist.IsExists(domain) {
					//–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–∞ —Å—Ä–µ–¥–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö
					continue
				}

				linksHash = append(linksHash, linkHash)
				message = append(message, makeMessage(article))
			}

			if len(linksHash) == 0 {
				//–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ, —Ç–æ —Å–∫—Ä–∏–ø–∞–µ–º
				continue
			}

			//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
			if err = c.sendMessage(cat, strings.Join(message, "\n\n")); err != nil {
				return err
			}

			//–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if err = c.repo.SentNews.Save(linksHash); err != nil {
				return err
			}

			//–ü–∞—É–∑–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç
			time.Sleep(c.cfg.CategorySleep * time.Minute)
		}
	}
}

func (c *Consumer) sendMessage(cat model.Category, messageText string) error {
	chatCategories, err := c.repo.ChatCategory.GetByCategoryId(cat.Id)
	if err != nil {
		return err
	}

	//–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
	for _, chatCategory := range chatCategories {
		go func(chatId int64) {
			msg := tgbotapi.NewMessage(chatId, messageText)
			msg.ParseMode = tgbotapi.ModeHTML
			c.bot.Send(msg)
		}(chatCategory.ChatId)
	}

	return nil
}
